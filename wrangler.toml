#:schema node_modules/wrangler/config-schema.json
name = "bsky-bot-recalls"
main = "src/index.ts"
compatibility_date = "2024-11-19"
compatibility_flags = ["nodejs_compat_v2"]

# Variable bindings.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#environment-variables
[vars]
BSKY_USERNAME = 'CF_PROD'
[env.dev.vars]
BSKY_USERNAME = 'CF_DEV'

# Docs: https://developers.cloudflare.com/workflows/
[[workflows]]
name = "fda-workflow"
binding = "WORKFLOW_FDA"
class_name = "FdaWorkflow"

# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#d1-databases
[[d1_databases]]
binding = "DB"
database_name = "recall-alert-prod"
database_id = "b2b517f6-a2ba-4a34-a9c7-8e68d91afc32"
migrations_dir = "drizzle/migrations"
preview_database_id = "DB"                           # should match binding name
[[env.dev.d1_databases]]
binding = "DB"
database_name = "recall-alert-dev"
database_id = "5b3fcc04-d5f7-4842-877e-ac7bd28f32a6"
migrations_dir = "drizzle/migrations"
preview_database_id = "DB"                           # should match binding name

# Docs: https://developers.cloudflare.com/workers/platform/triggers/cron-triggers/
# Configuration: https://developers.cloudflare.com/workers/wrangler/configuration/#triggers
[triggers]
crons = ["*/30 * * * *"] # every 30 minutes
[env.dev.triggers]
crons = ["* * * * *"] # every minute

# Workers Logs
# Docs: https://developers.cloudflare.com/workers/observability/logs/workers-logs/
# Configuration: https://developers.cloudflare.com/workers/observability/logs/workers-logs/#enable-workers-logs
[observability]
enabled = true
[env.dev.observability]
enabled = true

# Automatically place your workloads in an optimal location to minimize latency.
# If you are running back-end logic in a Worker, running it closer to your back-end infrastructure
# rather than the end user may result in better performance.
# Docs: https://developers.cloudflare.com/workers/configuration/smart-placement/#smart-placement
# [placement]
# mode = "smart"

# Bind a Durable Object. Durable objects are a scale-to-zero compute primitive based on the actor model.
# Durable Objects can live for as long as needed. Use these when you need a long-running "server", such as in realtime apps.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#durable-objects
# [[durable_objects.bindings]]
# name = "MY_DURABLE_OBJECT"
# class_name = "MyDurableObject"

# Durable Object migrations.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#migrations
# [[migrations]]
# tag = "v1"
# new_classes = ["MyDurableObject"]

# Bind a KV Namespace. Use KV as persistent storage for small key-value pairs.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#kv-namespaces
# [[kv_namespaces]]
# binding = "MY_KV_NAMESPACE"
# id = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# Bind a Queue producer. Use this binding to schedule an arbitrary task that may be processed later by a Queue consumer.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#queues
# [[queues.producers]]
# binding = "MY_QUEUE"
# queue = "my-queue"

# Bind a Queue consumer. Queue Consumers can retrieve tasks scheduled by Producers to act on them.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#queues
# [[queues.consumers]]
# queue = "my-queue"

# Bind an R2 Bucket. Use R2 to store arbitrarily large blobs of data, such as files.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#r2-buckets
# [[r2_buckets]]
# binding = "MY_BUCKET"
# bucket_name = "my-bucket"

# Bind another Worker service. Use this binding to call another Worker without network overhead.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#service-bindings
# [[services]]
# binding = "MY_SERVICE"
# service = "my-service"

# Bind a Vectorize index. Use to store and query vector embeddings for semantic search, classification and other vector search use-cases.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#vectorize-indexes
# [[vectorize]]
# binding = "MY_INDEX"
# index_name = "my-index"
